apply plugin: 'com.android.application'
apply plugin: 'android-aspectjx' // apply plugin

def apkName
android {
    compileSdkVersion rootProject.ext.common.compileSdkVersion
    buildToolsVersion rootProject.ext.common.buildToolsVersion

    defaultConfig {
        applicationId "com.qiyei.android"
        minSdkVersion rootProject.ext.common.minSdkVersion
        targetSdkVersion rootProject.ext.common.targetSdkVersion
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
        encoding "UTF-8"
    }


    /**
     * 签名配置
     */
    signingConfigs {
        //正式版签名
        release {
            keyAlias proj_keyAlias
            keyPassword proj_keyPassword
            storeFile file(project.getRootDir().getAbsolutePath() + proj_storeFile)
            storePassword proj_storePassword
        }

        //调试版签名
        debug {
            keyAlias proj_keyAlias
            keyPassword proj_keyPassword
            storeFile file(project.getRootDir().getAbsolutePath() + proj_storeFile)
            storePassword proj_storePassword
        }
    }

    buildTypes {
        debug {
            // 对齐zip
            zipAlignEnabled  = true
            // 删除无用资源
            shrinkResources  = false
            minifyEnabled false
            signingConfig signingConfigs.debug
            //multiDexKeepFile file('multidex-config.txt')
            //multiDexKeepProguard file('"multiDexKeep.pro"')
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            // 对齐zip
            zipAlignEnabled  = true
            // 删除无用资源
            shrinkResources  = false
            minifyEnabled false
            signingConfig signingConfigs.release
            //multiDexKeepFile file('multidex-config.txt')
            //multiDexKeepProguard file('"multiDexKeep.pro"')
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

    }

    sourceSets {
        main {
            jni.srcDirs = ['src/main/jni', 'src/main/cpp/']
            jniLibs.srcDirs = ['libs']  //配置生成jniLibs
        }
    }

    //解决国际化资源文件不全
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
    aaptOptions { 
        cruncherEnabled = false
    }
    
    dataBinding {
        enabled = true
    }

    //指定github上ndk版本，要不然会编译失败
    ndkVersion '21.3.6528147'
}

aspectjx {
    //开启AspectJX功能
    enabled true
    //aop 代码所在的包名
    include 'com.qiyei.android.aop'
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation "androidx.constraintlayout:constraintlayout:1.1.3"

//    annotationProcessor "androidx.lifecycle:lifecycle-compiler:2.1.0"
    implementation "androidx.lifecycle:lifecycle-common-java8:2.1.0"

    //AspectJ
    implementation 'org.aspectj:aspectjrt:1.9.5'

    api project(':AndroidApp:UI')
    api project(':AndroidApp:OpenSource')
    api project(':AndroidApp:Architecture')
    api project(':AndroidApp:Performance')
    api project(':AndroidApp:Media')
    api project(':AndroidApp:NDK')

    testImplementation "junit:junit:4.12"
    androidTestImplementation "androidx.test:runner:1.2.0"
    androidTestImplementation "androidx.test.espresso:espresso-core:3.2.0"

}

def releaseTime() {
    // return new Date().format("yyyyMMdd", TimeZone.getTimeZone("UTC")) //年月日
    return new Date().format("yyyy-MM-dd-HH-mm-ss", TimeZone.getTimeZone("GMT+8:00")) //年月日时分秒
}

android.applicationVariants.all { variant ->
    //如果是release版本
    if (variant.buildType.name == 'release') {
        variant.outputs.all{ output ->
            //查找所有的apk
            if (outputFileName.endsWith('.apk')) {
                def index = outputFileName.indexOf(".")
                def prefix = outputFileName.substring(0,index)
                def suffix = outputFileName.substring(index)
                //重新定义apk的名称: 工程名 + 版本号 + 生成时间
                def fileName = prefix + "_V${android.defaultConfig.versionName}_${releaseTime()}" + suffix
                //outputFile.parent参数可以改成你你想要的发布路径
                outputFileName = fileName
                apkName = outputFileName
            }
        }
    }
}

//afterEvaluate {
//    tasks.matching {
//        it.name.startsWith('dex')
//    }.each { dx ->
//        def listFile = project.rootDir.absolutePath+'/AndroidApp/Android/maindexlist.txt'
//        if (dx.additionalParameters == null) {
//            dx.additionalParameters = []
//        }
//        //表示当方法数越界时则生成多个dex文件（我的没有越界，貌似也生成了两个）
//        dx.additionalParameters += '--multi-dex'
//        //这个指定了listFile中的类（即maindexlist.txt中的类）会打包到主dex中，不过注意下一条。
//        dx.additionalParameters += '--main-dex-list=' +listFile
//        //表明只有-main-dex-list所指定的类（在我的配置中，就是app目录下的maindexlist.txt中包含的类）才能打包到主dex中，如果没有这个选项，上个选项就会失效
//        dx.additionalParameters += '--minimal-main-dex'
//    }
//}

def execute360JiaGuCmd(cmd){
    def p = cmd.execute(null, new File("$rootProject.jiaGuPluginPath"))
    println p.text
    p.waitFor()  // 用以等待外部进程调用结束
    println p.exitValue()
}

task reinforceAppTask(dependsOn: 'assembleRelease') {
    group "jiaGuApk"
    doLast {
        println "360加固 begin"
        def currFile = new File(".")
        // 生成的apk的路劲
        def appFilePath = currFile.getCanonicalPath() + File.separator + project.name +
                File.separator + "build" + File.separator + "outputs"+ File.separator + "apk" + File.separator + "release" +
                File.separator
        def apkFile = appFilePath + apkName
        println "appFilePath=" + apkFile

        if(!new File(apkFile).exists()){
            println "apk not exist"
            return
        }
        def cmdBase = 'java -jar jiagu.jar'
        def cmdLogin = cmdBase + " -login  ${rootProject.jiaGuUserName}   ${rootProject.jiaGuPwd}"
        def cmdImportSign = cmdBase + ' -importsign ' +
                rootProject.storeFile.getCanonicalPath() + ' ' + rootProject.storePassword + ' ' + rootProject.keyAlias + ' ' + rootProject.keyPassword
        def cmdShowSign = cmdBase + ' -showsign'
        def cmdConfig = cmdBase + ' -config -x86'
        def cmdShowConfig = cmdBase + ' -showconfig'
        def cmdVersion = cmdBase + ' -version'
        //生成的路径
        def outPath = new File(appFilePath)
        //删除旧文件
        FileTree tree = fileTree(dir: outPath)
        tree.each { File file ->
            if (file.toString().contains("jiagu")) {
                delete file
            }
        }
        def cmdJiaGu = cmdBase + ' -jiagu ' + apkFile + ' ' + outPath.getCanonicalPath() + ' -autosign' +' -automulpkg'
        execute360JiaGuCmd(cmdLogin)
        execute360JiaGuCmd(cmdImportSign)
        execute360JiaGuCmd(cmdJiaGu)

        File oldFile = new File(apkFile)
        if (oldFile.exists()){
            oldFile.delete()
            println "360加固 delete oldFile=" + apkFile
        }
        //重命名
        File[] files = outPath.listFiles()
        boolean reSign = true
        File jiaGuFile
        for (File file:files){
            if (file.name.contains("jiagu")){
                jiaGuFile = file
            }
            if (file.name.contains("sign")){
                reSign = false
                break
            }
        }
        if (reSign && jiaGuFile != null){
            //默认v1 v2，需配置好环境变量，防止找不到apksigner
            def reSignCmd = 'apksigner sign --ks ' + rootProject.storeFile.getCanonicalPath() +
                    ' --ks-key-alias ' + rootProject.keyAlias +
                    ' --ks-pass pass:' + rootProject.keyPassword +
                    ' --key-pass pass:' + rootProject.storePassword +
                    ' --out ' + apkFile + ' ' + outPath.getCanonicalPath() + File.separator + jiaGuFile.name
            executeCmd(reSignCmd)
            if (jiaGuFile.exists()){
                println "360加固 delete jiaGuFile=" + jiaGuFile.name
                jiaGuFile.delete()
            }
        } else {
            if (jiaGuFile != null){
                jiaGuFile.renameTo(new File(apkFile))
            }
        }
    }
}

def executeCmd(cmd){
    def commands = []
    if (System.getProperty("os.name").toLowerCase().startsWith("windows")) {
        commands << 'cmd'
        commands << '/c'
    } else {
        commands << 'bash'
        commands << '-c'
    }
    commands << cmd
    println "executeCmd cmd=" + cmd
    exec {
        commandLine commands
    }
}

this.project.afterEvaluate { project ->
    def buildTask = project.tasks.getByName('assembleRelease')
    if(buildTask == null) {
        throw GradleException('the assembleRelease task is not found')
    }
    /**
     * 5.0以后废弃了execute()方法，finalizedBy（返回完成此任务之后的任务）代替
     * tasks.reinforceAppTask.execute()
     */
    buildTask.finalizedBy "reinforceAppTask"
}
